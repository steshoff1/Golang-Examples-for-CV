// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	user "redditclone/pkg/user"
)

// UsersRepoInterface is an autogenerated mock type for the UsersRepoInterface type
type UsersRepoInterface struct {
	mock.Mock
}

// Create provides a mock function with no fields
func (_m *UsersRepoInterface) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AddSession provides a mock function with given fields: usr
func (_m *UsersRepoInterface) AddSession(usr user.UserInterface) (string, error) {
	ret := _m.Called(usr)

	var r0 string
	if rf, ok := ret.Get(0).(func(user.UserInterface) string); ok {
		r0 = rf(usr)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.UserInterface) error); ok {
		r1 = rf(usr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: r
func (_m *UsersRepoInterface) CreateUser(r *http.Request) (user.UserInterface, error) {
	ret := _m.Called(r)

	var r0 user.UserInterface
	if rf, ok := ret.Get(0).(func(*http.Request) user.UserInterface); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user.UserInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Destroy provides a mock function with given fields:
func (_m *UsersRepoInterface) Destroy() {
	_m.Called()
}

// Find provides a mock function with given fields: username
func (_m *UsersRepoInterface) Find(username string) (user.UserInterface, error) {
	ret := _m.Called(username)

	var r0 user.UserInterface
	if rf, ok := ret.Get(0).(func(string) user.UserInterface); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user.UserInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Valid provides a mock function with given fields: sessionID
func (_m *UsersRepoInterface) Valid(sessionID string) (bool, error) {
	ret := _m.Called(sessionID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsersRepoInterface creates a new instance of UsersRepoInterface. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersRepoInterface(t testing.TB) *UsersRepoInterface {
	mock := &UsersRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
