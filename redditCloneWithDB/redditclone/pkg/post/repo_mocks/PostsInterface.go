// Code generated by mockery v2.12.1. DO NOT EDIT.
package mocks

import (
	http "net/http"
	post "redditclone/pkg/post"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	user "redditclone/pkg/user"
)

// PostsInterface is an autogenerated mock type for the PostsInterface type
type PostsInterface struct {
	mock.Mock
}

// Create provides a mock function with no fields
func (_m *PostsInterface) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Create provides a mock function with given fields: r, usr
func (_m *PostsInterface) Create(r *http.Request, usr user.User) ([]byte, error) {
	ret := _m.Called(r, usr)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*http.Request, user.User) []byte); ok {
		r0 = rf(r, usr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, user.User) error); ok {
		r1 = rf(r, usr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateComment provides a mock function with given fields: r, usr, postId
func (_m *PostsInterface) CreateComment(r *http.Request, usr user.User, postId string) error {
	ret := _m.Called(r, usr, postId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request, user.User, string) error); ok {
		r0 = rf(r, usr, postId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *PostsInterface) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteComment provides a mock function with given fields: postId, commentId
func (_m *PostsInterface) DeleteComment(postId string, commentId string) error {
	ret := _m.Called(postId, commentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(postId, commentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Destroy provides a mock function with given fields:
func (_m *PostsInterface) Destroy() {
	_m.Called()
}

// FindByCategory provides a mock function with given fields: category
func (_m *PostsInterface) FindByCategory(category string) []*post.Post {
	ret := _m.Called(category)

	var r0 []*post.Post
	if rf, ok := ret.Get(0).(func(string) []*post.Post); ok {
		r0 = rf(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	return r0
}

// FindByUsername provides a mock function with given fields: usr
func (_m *PostsInterface) FindByUsername(usr user.UserInterface) []*post.Post {
	ret := _m.Called(usr)

	var r0 []*post.Post
	if rf, ok := ret.Get(0).(func(user.UserInterface) []*post.Post); ok {
		r0 = rf(usr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *PostsInterface) GetAll() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: id, viewsAdd
func (_m *PostsInterface) GetOne(id string, viewsAdd uint32) ([]byte, error) {
	ret := _m.Called(id, viewsAdd)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, uint32) []byte); ok {
		r0 = rf(id, viewsAdd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint32) error); ok {
		r1 = rf(id, viewsAdd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeVote provides a mock function with given fields: postId, userId, vote
func (_m *PostsInterface) MakeVote(postId string, userId string, vote int) error {
	ret := _m.Called(postId, userId, vote)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(postId, userId, vote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPostsInterface creates a new instance of PostsInterface. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostsInterface(t testing.TB) *PostsInterface {
	mock := &PostsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
